{
  "version": 3,
  "sources": [
    "../../../../../usr/local/lib/node_modules/browserify/node_modules/browser-pack/_prelude.js",
    "lib/kalender-datepicker-angular.js",
    "node_modules/kalender/index.js",
    "node_modules/kalender/lib/calendar.js",
    "node_modules/kalender/lib/day.js",
    "node_modules/kalender/lib/month.js",
    "node_modules/kalender/lib/util.js",
    "node_modules/kalender/lib/year.js"
  ],
  "names": [],
  "mappingstvpBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA",
  "file": "generated.js",
  "sourceRoot": "",
  "sourcesContent": [
    "(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})",
    "var kalender = require('kalender');\n\nangular\n.module('kalender.datepicker', [])\n.constant('kalender', kalender)\n.directive('kalenderDatepicker', function() {\n    return {\n        replace: true,\n        scope: {\n            selection: '='\n        },\n        template: '' +\n'<div class=\"kalender\">' +\n'<button type=\"button\" class=\"kalender-previous-month\" ng-click=\"previousMonth()\">previous</button>' +\n'<button type=\"button\" class=\"kalender-current-month\" ng-click=\"currentMonth()\">current</button>' +\n'<button type=\"button\" class=\"kalender-next-month\" ng-click=\"nextMonth()\">next</button>' +\n'<table class=\"kalender-calendar\">' +\n    '<caption class=\"kalender-calendar-title\">{{ month.year }} â€“ {{ month.month }}<caption>' +\n    '<tr>' +\n        '<th ng-repeat=\"heading in weekDayHeadings\">' +\n            '{{ heading }}' +\n        '</th>' +\n    '</tr>' +\n    '<tr ng-repeat=\"week in calendar\">' +\n        '<td class=\"kalender-day\" ' +\n            'ng-repeat=\"day in week\" ' +\n            'ng-click=\"setSelection(day)\" ' +\n            'ng-class=\"{ \\'kalender-is-sibling-month\\': day.isSiblingMonth, ' +\n            '\\'kalender-is-today\\': day.isToday, ' +\n            '\\'kalender-is-in-between\\': day.isInBetween, ' +\n            '\\'kalender-is-weekend\\': day.isWeekend, ' +\n            '\\'kalender-is-selected\\': isSelected(day) ' +\n            '}\">' +\n            '{{ day.day }}' +\n        '</td>' +\n    '</tr>' +\n'</table>' +\n'</div>',\n        link: function($scope) {\n            var options = { weekStart: 1 };\n\n            $scope.calendar = [];\n            $scope.weekDayHeadings = [\n                'mon',\n                'tue',\n                'wed',\n                'thu',\n                'fri',\n                'sat',\n                'sun'\n            ];\n            $scope.currentMonth = function() {\n                $scope.month = {\n                    year: (new Date()).getFullYear(),\n                    month: 1 + (new Date()).getMonth()\n                };\n            };\n\n            $scope.isSelected = function(day) {\n                if (angular.isDefined($scope.selection)) {\n                    return kalender.day.isEqual($scope.selection, day);\n                } else {\n                    return false;\n                }\n            };\n\n            $scope.previousMonth = function() {\n                $scope.month =\n                    kalender.month.previousMonth($scope.month);\n            };\n\n            $scope.nextMonth = function() {\n                $scope.month =\n                    kalender.month.nextMonth($scope.month);\n            };\n\n            $scope.setSelection = function(day) {\n                $scope.selection = day;\n            };\n\n            $scope.$watch('month', function(month) {\n                $scope.calendar = kalender.calendar(month, options);\n\n                // set isSelected\n                if (angular.isDefined($scope.selection)) {\n                    $scope.calendar = $scope.calendar.map(function(week) {\n                        return week.map(function(day) {\n                            if (kalender.day.isEqual(day, $scope.selection)) {\n                                day.isSelected = true;\n                            }\n\n                            return day;\n                        });\n                    });\n                }\n\n                // set isWeekend\n                var SATURDAY_DAY_OF_WEEK = 6;\n                var SUNDAY_DAY_OF_WEEK = 0;\n\n                $scope.calendar = $scope.calendar.map(function(week) {\n                    return week.map(function(day) {\n                        if (day.dayOfWeek === SATURDAY_DAY_OF_WEEK ||\n                            day.dayOfWeek === SUNDAY_DAY_OF_WEEK)\n                        {\n                            day.isWeekend = true;\n                        }\n\n                        return day;\n                    });\n                });\n            }, true);\n\n            $scope.currentMonth();\n        }\n    };\n})\n;\n",
    "module.exports = {\n    year: require('./lib/year'),\n    month: require('./lib/month'),\n    day: require('./lib/day'),\n    calendar: require('./lib/calendar'),\n    util: require('./lib/util')\n};\n",
    "'use strict';\n\nvar month = require('./month');\nvar day = require('./day');\n\nvar DAYS_PER_WEEK = 7;\n\n/**\n * Returns collection of day objects for the given month. Includes days from\n * sibling months to make for full weeks. Defaults to the current month.\n *\n * @argument {Object} month\n * @argument {Number} month.year\n * @argument {Number} month.month\n * @argument {Object} options\n * @argument {Number} options.weekStart sets the first day of week\n *\n * @returns {Object[]} days\n */\nfunction calendar(_currentMonth, options) {\n    var currentMonth = _currentMonth || getCurrentMonth();\n    var days = []\n        .concat(daysMissingBefore(currentMonth, weekStart(options)))\n        .concat(month.days(currentMonth))\n        .concat(daysMissingAfter(currentMonth, weekStart(options)));\n\n    return groupPerWeek(days);\n}\n\n/**\n * Group the days per week.\n *\n * @argument {Object[]} days\n *\n * @returns {Object[][]} returns a matrix of weeks and days\n */\nfunction groupPerWeek(days) {\n    var amountOfWeeks = days.length / DAYS_PER_WEEK;\n    var weeks = [];\n\n    for (var week = 0; week < amountOfWeeks; week++) {\n        weeks.push(days.slice(week * DAYS_PER_WEEK,\n                              (week + 1) * DAYS_PER_WEEK));\n    }\n\n    return weeks;\n}\n\n/**\n * Returns week start using the one defined in options otherwise falls back to\n * default week start.\n *\n * @argument {Object} options\n * @argument {Number} options.weekStart sets the first day of week\n *\n * @returns {Number} week start\n */\nfunction weekStart(options) {\n    var WEEK_START_DEFAULT = 0;\n\n    if (options && options.weekStart) {\n        return options.weekStart;\n    } else {\n        return WEEK_START_DEFAULT;\n    }\n}\n\n/**\n * Returns collection of day objects for the month before given month. Only\n * includes days to make a full week.\n *\n * @argument {Object} month\n * @argument {Number} month.year\n * @argument {Number} month.month\n *\n * @returns {Array} collection of days\n */\nfunction daysMissingBefore(currentMonth, weekStart) {\n    if (amountMissingBefore(currentMonth, weekStart)) {\n        var days = month.days(month.previousMonth(currentMonth))\n            .slice(-1 * amountMissingBefore(currentMonth, weekStart));\n\n        return markAsSiblingMonth(days);\n    } else {\n        return [];\n    }\n}\n\n/**\n * Returns amount of days missing before given month to make a full week.\n *\n * @argument {Object} month\n * @argument {Number} month.year\n * @argument {Number} month.month\n *\n * @returns {Number} amount of days\n */\nfunction amountMissingBefore(currentMonth, weekStart) {\n    return (DAYS_PER_WEEK - weekStart +\n            month.days(currentMonth)[0].dayOfWeek) % DAYS_PER_WEEK;\n}\n\n/**\n * Returns collection of day objects for the month after given month. Only\n * includes days to make a full week.\n *\n * @argument {Object} month\n * @argument {Number} month.year\n * @argument {Number} month.month\n *\n * @returns {Array} collection of days\n */\nfunction daysMissingAfter(currentMonth, weekStart) {\n    if (amountMissingAfter(currentMonth, weekStart)) {\n        var days = month.days(month.nextMonth(currentMonth))\n            .slice(0, amountMissingAfter(currentMonth, weekStart));\n\n        return markAsSiblingMonth(days);\n    } else {\n        return [];\n    }\n}\n\n/**\n * Returns amount of days missing after given month to make a full week.\n *\n * @argument {Object} month\n * @argument {Number} month.year\n * @argument {Number} month.month\n *\n * @returns {Number} amount of days\n */\nfunction amountMissingAfter(currentMonth, weekStart) {\n    var days = month.days(currentMonth);\n    var lastDayOfWeek = day.dayOfWeek(days[(days.length - 1)]);\n\n    return ((DAYS_PER_WEEK + weekStart) - lastDayOfWeek - 1) % DAYS_PER_WEEK;\n}\n\n/**\n * Returns collection of days marked as sibling month.\n *\n * @argument {Object[]} days\n * @argument {Number} days[].year\n * @argument {Number} days[].month\n * @argument {Number} days[].day\n *\n * @returns {Object[]} days with attribute isSiblingMonth: true\n */\nfunction markAsSiblingMonth(days) {\n    return days.map(function(day) {\n        day.isSiblingMonth = true;\n\n        return day;\n    });\n}\n\n/**\n * Returns the current month\n *\n * @returns {Object} month\n */\nfunction getCurrentMonth() {\n    var currentDate = new Date();\n\n    return {\n        year: currentDate.getFullYear(),\n        month: (currentDate.getMonth() + 1)\n    };\n}\n\nmodule.exports = calendar;\n",
    "'use strict';\n\nvar DAY_WEIGHTS = {\n    year: 385,\n    month: 32,\n    day: 1\n};\n\n/**\n * Returns day of week for given day. 1 for sunday, 7 for monday.\n *\n * @argument {Object} day\n * @argument {Number} day.year\n * @argument {Number} day.month\n * @argument {Number} day.day\n *\n * @returns {Number} day of week\n */\nfunction dayOfWeek(day) {\n    var date = new Date(day.year, day.month - 1, day.day);\n\n    return date.getDay();\n}\n\n/**\n * Returns if subject day is before comparison day.\n *\n * @argument {Object} subject day\n * @argument {Object} comparsion day\n *\n * @returns {Boolean} true when subject day is before comparison day\n */\nfunction isBefore(subject, comparison) {\n    return dayWeight(subject) < dayWeight(comparison);\n}\n\n/**\n * Returns if subject day is after comparison day.\n *\n * @argument {Object} subject day\n * @argument {Object} comparsion day\n *\n * @returns {Boolean} true when subject day is after comparison day\n */\nfunction isAfter(subject, comparison) {\n    return dayWeight(subject) > dayWeight(comparison);\n}\n\n/**\n * Returns weight for a day which can be used in comparisons. Weights are not\n * relative to each other. Later dates only have higher weights. Using weights\n * is more than a 100 times faster than creating a date and getting the\n * primitive value.\n *\n * @argument {Object} day\n * @argument {Number} day.year\n * @argument {Number} day.month\n * @argument {Number} day.day\n *\n * @returns {Number} dayWeight timestamp for start of day\n */\nfunction dayWeight(day) {\n    return (day.day * DAY_WEIGHTS.day) +\n        (day.month * DAY_WEIGHTS.month) +\n        (day.year * DAY_WEIGHTS.year);\n}\n\n/**\n * Returns if subject day is the same as the comparison day.\n *\n * @argument {Object} subject day\n * @argument {Object} comparsion day\n *\n * @returns {Boolean} true when subject day is the same as the comparison day\n */\nfunction isEqual(subject, comparison) {\n    return (subject.day === comparison.day) &&\n        (subject.month === comparison.month) &&\n        (subject.year === comparison.year);\n}\n\nmodule.exports = {\n    dayOfWeek: dayOfWeek,\n    isBefore: isBefore,\n    isAfter: isAfter,\n    isEqual: isEqual\n};\n",
    "'use strict';\n\nvar year = require('./year');\nvar day = require('./day');\n\nvar MONTHS_PER_YEAR = 12;\n\n/**\n * Returns amount of days for given month, includes leap days.\n *\n * @argument {Object} month\n * @argument {Number} month.year\n * @argument {Number} month.month\n *\n * @returns {Number} amount of days\n */\nfunction amountOfDays(month) {\n    var DAYS_PER_MONTH = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n    var normalAmount = DAYS_PER_MONTH[month.month - 1];\n\n    return hasLeapDay(month) ? normalAmount + 1 : normalAmount;\n}\n\n/**\n * Returns true when given month has a leap day.\n *\n * @argument {Object} month\n * @argument {Number} month.year\n * @argument {Number} month.month\n *\n * @returns {Boolean}\n */\nfunction hasLeapDay(month) {\n    var MONTH_WITH_ADDITIONAL_DAY_ON_LEAP_YEAR = 2;\n\n    return (month.month === MONTH_WITH_ADDITIONAL_DAY_ON_LEAP_YEAR &&\n        year.isLeapYear(month.year));\n}\n\n/**\n * Returns month previous to given month.\n *\n * @argument {Object} month\n * @argument {Number} month.year\n * @argument {Number} month.month\n *\n * @returns {Object} new month object\n */\nfunction previousMonth(month) {\n    if (month.month === 1) {\n        return {\n            year: (month.year - 1),\n            month: MONTHS_PER_YEAR\n        };\n    } else {\n        return {\n            year: month.year,\n            month: (month.month - 1)\n        };\n    }\n}\n\n/**\n * Returns month next to given month.\n *\n * @argument {Object} month\n * @argument {Number} month.year\n * @argument {Number} month.month\n *\n * @returns {Object} new month object\n */\nfunction nextMonth(month) {\n    if (month.month === MONTHS_PER_YEAR) {\n        return {\n            year: (month.year + 1),\n            month: 1\n        };\n    } else {\n        return {\n            year: month.year,\n            month: (month.month + 1)\n        };\n    }\n}\n\n/**\n * Returns collection of day objects for given month.\n *\n * @argument {Object} month\n * @argument {Number} month.year\n * @argument {Number} month.month\n *\n * @returns {Array} collection of day objects\n */\nfunction days(month) {\n    var result = [];\n\n    for (var currentDay = 1, amount = amountOfDays(month);\n         currentDay <= amount;\n         currentDay++)\n    {\n        result.push({\n            year: month.year,\n            month: month.month,\n            day: currentDay,\n            dayOfWeek: day.dayOfWeek({\n                year: month.year,\n                month: month.month,\n                day: currentDay\n            })\n        });\n    }\n\n    return flagToday(result);\n}\n\nfunction flagToday(days) {\n    var curDate = new Date();\n    var dayOfMonth = curDate.getDate();\n\n    if (days[0].year === curDate.getFullYear() &&\n        days[0].month === (curDate.getMonth() + 1))\n    {\n        return days.map(function(day) {\n            if (day.day === dayOfMonth) {\n                day.isToday = true;\n            }\n\n            return day;\n        });\n    } else {\n        return days;\n    }\n\n}\n\nmodule.exports = {\n    amountOfDays: amountOfDays,\n    previousMonth: previousMonth,\n    nextMonth: nextMonth,\n    days: days\n};\n",
    "'use strict';\n\n/**\n * Returns a new calendar with the results of calling a provided callback\n * function on every day.\n *\n * @argument {Object[][]} calendar\n * @argument {Function} callback\n *\n * @returns {Object[][]} calendar with days mapped with callback\n */\nfunction mapDays(calendar, callback) {\n    return calendar.map(function(week) {\n        return week.map(callback);\n    });\n}\n\nmodule.exports = {\n    mapDays: mapDays\n};\n",
    "'use strict';\n\n/**\n * Returns true when given year is a leap year.\n *\n * @argument {Number} year\n *\n * @returns {Boolean}\n */\nfunction isLeapYear(year) {\n    return ((year % 4 === 0) && (year % 100 !== 0)) || (year % 400 === 0);\n}\n\nmodule.exports = {\n    isLeapYear: isLeapYear\n};\n"
  ]
}